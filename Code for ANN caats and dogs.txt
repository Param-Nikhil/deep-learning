from keras.models import Sequential
from keras.layers import Convolution2D
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense


model=Sequential()

model.add(Convolution2D(32,3,strides=3,data_format="channels_last" ,input_shape=(64,64,3),activation='relu'))

model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(128,activation='relu'))

model.add(Dense(1,activation='sigmoid'))

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])



from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
                                    rescale=1./255,
                                    shear_range=0.2,
                                    zoom_range=0.2,
                                    horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)
train_generator = train_datagen.flow_from_directory('/content/drive/My Drive/datasets/deep learning/ANN/cats and dogs/dataset/training_set',
                                                      target_size=(64, 64),
                                                      batch_size=32,
                                                      class_mode='binary')
validation_generator = test_datagen.flow_from_directory(
                                                        '/content/drive/My Drive/datasets/deep learning/ANN/cats and dogs/dataset/test_set',
                                                        target_size=(64, 64),
                                                        batch_size=32,
                                                        class_mode='binary')




model.fit_generator(
          train_generator,
          steps_per_epoch=8000,
          epochs=2,
          validation_data=validation_generator,
          validation_steps=2000)







import numpy as np
from keras.preprocessing import image 
test_i=image.load_img('D:/Programes/my photon/self material/ANN/c&d cnn/dataset/single pred/dog_or_cat2.jpg.jpeg',target_size=(64,64))
test_i=image.img_to_array(test_i)
test_i=np.expand_dims(test_i,axis=0)
result=model.predict(test_i)
print(validation_generator.class_indices)

if result[0][0]==1:
    prediction='dog'
else:
    prediction='cat'
    